using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BustabitAnalise
{
    class Program
    {
        public static int[] data = new int[] { 5, 2, 16, 4, 2, 7, 7, 2, 3, 50, 1, 11, 10, 12, 5, 3, 12, 7, 13, 7, 6, 19, 13, 2, 8, 4, 18, 6, 38, 33, 7, 3, 16, 4, 2, 10, 50, 14, 8, 2, 12, 12, 16, 15, 1, 1, 1, 3, 3, 6, 11, 10, 7, 2, 16, 44, 29, 4, 5, 6, 26, 1, 11, 4, 3, 14, 17, 2, 27, 3, 24, 27, 11, 6, 1, 1, 15, 2, 6, 7, 2, 2, 2, 37, 6, 22, 4, 7, 1, 8, 9, 1, 7, 7, 1, 10, 12, 7, 48, 6, 2, 3, 3, 3, 10, 3, 1, 11, 27, 13, 6, 1, 7, 10, 2, 13, 33, 2, 21, 2, 9, 5, 15, 20, 2, 2, 33, 8, 10, 31, 3, 2, 11, 4, 3, 2, 11, 10, 19, 5, 19, 3, 20, 15, 10, 3, 13, 4, 7, 6, 12, 14, 3, 2, 13, 42, 1, 9, 3, 1, 16, 2, 1, 32, 1, 1, 3, 3, 3, 4, 8, 22, 16, 5, 10, 2, 2, 21, 7, 27, 10, 16, 2, 14, 4, 2, 1, 14, 1, 5, 11, 5, 3, 3, 21, 8, 8, 18, 5, 8, 18, 2, 3, 59, 25, 7, 4, 7, 23, 8, 10, 8, 11, 10, 3, 7, 4, 6, 4, 11, 4, 7, 8, 1, 10, 3, 1, 1, 5, 7, 9, 4, 57, 17, 4, 20, 9, 2, 3, 8, 14, 6, 31, 6, 6, 4, 3, 22, 11, 8, 3, 8, 15, 9, 8, 13, 9, 19, 2, 33, 8, 7, 4, 23, 7, 1, 8, 12, 3, 8, 6, 1, 2, 20, 2, 1, 4, 13, 8, 14, 22, 4, 17, 9, 2, 1, 23, 18, 5, 5, 5, 10, 6, 6, 14, 1, 11, 8, 7, 4, 22, 4, 2, 1, 17, 19, 8, 23, 3, 13, 10, 6, 4, 2, 42, 1, 1, 1, 7, 9, 10, 29, 5, 3, 5, 33, 9, 1, 23, 14, 20, 11, 5, 8, 1, 10, 1, 28, 5, 4, 12, 5, 14, 1, 1, 2, 4, 7, 2, 13, 19, 1, 3, 32, 1, 2, 16, 23, 16, 18, 3, 11, 10, 6, 5, 2, 7, 7, 26, 1, 3, 1, 2, 13, 11, 2, 25, 1, 1, 1, 1, 6, 6, 2, 15, 5, 1, 7, 10, 26, 12, 1, 25, 5, 15, 2, 18, 13, 18, 11, 1, 7, 3, 5, 45, 3, 19, 1, 2, 8, 6, 8, 3, 4, 1, 11, 13, 38, 4, 8, 4, 20, 8, 2, 6, 3, 25, 1, 2, 5, 7, 4, 11, 6, 19, 11, 7, 7, 2, 15, 20, 53, 22, 54, 2, 8, 1, 12, 32, 10, 2, 26, 8, 17, 1, 5, 3, 13, 45, 8, 19, 19, 9, 2, 1, 9, 3, 9, 7, 10, 13, 2, 15, 4, 11, 26, 24, 25, 31, 2, 3, 4, 12, 12, 13, 11, 7, 9, 5, 6, 3, 19, 23, 1, 4, 9, 25, 34, 6, 2, 36, 14, 5, 3, 5, 5, 13, 10, 18, 19, 6, 6, 55, 2, 5, 1, 7, 10, 3, 3, 17, 27, 2, 2, 17, 3, 30, 6, 8, 3, 11, 22, 11, 11, 2, 4, 8, 6, 6, 3, 3, 14, 12, 2, 6, 4, 7, 12, 6, 19, 4, 14, 9, 4, 9, 11, 13, 12, 8, 4, 9, 4, 1, 4, 4, 18, 2, 5, 16, 2, 20, 3, 6, 2, 1, 22, 16, 17, 2, 14, 2, 3, 2, 4, 9, 10, 4, 4, 5, 2, 4, 8, 2, 4, 11, 20, 7, 7, 2, 5, 2, 1, 22, 31, 38, 15, 3, 10, 34, 4, 2, 1, 13, 3, 7, 31, 11, 6, 14, 11, 3, 19, 16, 7, 4, 1, 11, 4, 11, 4, 1, 14, 7, 1, 3, 7, 2, 7, 7, 21, 7, 3, 7, 16, 4, 6, 4, 2, 4, 10, 17, 2, 17, 6, 11, 5, 18, 3, 23, 3, 14, 3, 17, 1, 6, 15, 1, 7, 12, 13, 10, 1, 3, 11, 25, 2, 3, 6, 1, 12, 3, 10, 12, 16, 7, 4, 20, 1, 24, 6, 3, 9, 4, 11, 3, 1, 8, 19, 1, 28, 23, 25, 3, 7, 17, 7, 9, 9, 4, 12, 11, 12, 4, 7, 2, 12, 9, 15, 3, 34, 10, 1, 5, 1, 4, 2, 4, 5, 4, 2, 6, 8, 25, 2, 10, 2, 8, 19, 2, 18, 3, 24, 2, 6, 15, 3, 9, 6, 21, 7, 6, 5, 24, 11, 26, 8, 36, 18, 27, 4, 9, 6, 11, 3, 1, 2, 29, 2, 14, 7, 17, 6, 23, 2, 4, 8, 6, 4, 4, 3, 22, 9, 11, 28, 1, 4, 2, 3, 18, 2, 15, 9, 14, 3, 15, 9, 6, 2, 8, 11, 8, 13, 11, 33, 2, 14, 6, 4, 33, 15, 7, 5, 24, 7, 3, 4, 3, 34, 3, 6, 22, 1, 14, 5, 25, 7, 1, 7, 2, 14, 17, 13, 20, 8, 3, 19, 1, 13, 6, 6, 42, 9, 7, 10, 7, 7, 8, 12, 9, 12, 51, 1, 10, 10, 8, 8, 5, 5, 3, 19, 1, 7, 6, 6, 4, 4, 10, 9, 24, 3, 6, 19, 1, 31, 2, 1, 1, 1, 2, 21, 4, 1, 4, 2, 25, 3, 23, 9, 9, 7, 2, 7, 16, 3, 24, 22, 10, 5, 12, 11, 14, 9, 4, 16, 20, 7, 24, 12, 11, 3, 4, 14, 4, 5, 15, 1, 6, 71, 5, 2, 4, 9, 1, 12, 18, 2, 19, 15, 15, 3, 24, 5, 11, 6, 4, 8, 2, 1, 4, 14, 3, 3, 49, 13, 4, 7, 39, 21, 5, 2, 14, 5, 8, 5, 3, 2, 12, 10, 8, 24, 3, 12, 12, 4, 23, 4, 24, 25, 17, 18, 1, 2, 44, 2, 7, 8, 23, 37, 7, 9, 4, 26, 2, 17, 35, 1, 16, 9, 6, 12, 52, 13, 17, 2, 4, 15, 7, 2, 6, 12, 5, 5, 8, 15, 17, 5, 1, 5, 33, 10, 9, 4, 8, 7, 13, 6, 19, 8, 6, 1, 6, 1, 17, 3, 10, 5, 2, 14, 15, 2, 16, 30, 10, 1, 3, 26, 3, 2, 3, 5, 11, 22, 19, 39, 5, 40, 2, 8, 6, 9, 24, 33, 21, 1, 4, 8, 44, 2, 9, 1, 12, 4, 14, 46, 22, 27, 1, 5, 4, 9, 1, 3, 12, 4, 1, 11, 21, 6, 8, 3, 1, 11, 15, 8, 5, 22, 1, 18, 1, 9, 2, 12, 5, 2, 7, 19, 15, 15, 9, 11, 3, 5, 13, 15, 2, 10, 15, 11, 1, 4, 28, 7, 6, 4, 4, 22, 6, 9, 12, 22, 7, 7, 4, 2, 9, 9, 30, 20, 16, 4, 3, 8, 1, 3, 3, 12, 4, 19, 10, 9, 5, 1, 3, 6, 2, 2, 10, 2, 6, 9, 1, 11, 1, 16, 3, 1, 13, 13, 24, 2, 12, 8, 5, 2, 12, 2, 13, 13, 19, 5, 12, 19, 3, 9, 5, 11, 9, 7, 14, 7, 1, 15, 10, 2, 5, 2, 31, 12, 24, 5, 5, 34, 4, 9, 1, 4, 38, 3, 2, 3, 15, 17, 32, 3, 7, 26, 9, 4, 5, 6, 3, 5, 4, 6, 28, 4, 6, 2, 12, 21, 19, 3, 13, 7, 12, 2, 46, 8, 7, 4, 10, 5, 10, 2, 2, 8, 4, 28, 22, 7, 14, 21, 14, 1, 12, 6, 15, 7, 4, 2, 55, 19, 13, 1, 12, 3, 33, 11, 5, 62, 3, 7, 2, 12, 4, 13, 4, 41, 4, 33, 13, 22, 18, 46, 63, 7, 20, 12, 5, 8, 6, 15, 28, 19, 9, 3, 2, 7, 42, 3, 25, 5, 19, 3, 17, 6, 18, 8, 1, 1, 8, 3, 5, 12, 1, 1, 23, 7, 4, 3, 2, 33, 2, 27, 3, 1, 3, 10, 9, 3, 1, 17, 22, 2, 18, 5, 4, 22, 11, 18, 10, 12, 1, 9, 9, 5, 23, 6, 4, 6, 4, 16, 3, 3, 5, 1, 18, 4, 8, 48, 12, 5, 2, 2, 8, 10, 7, 7, 16, 4, 10, 28, 2, 2, 4, 12, 2, 14, 3, 48, 6, 11, 18, 13, 2, 2, 2, 8, 1, 13, 31, 9, 13, 8, 22, 2, 45, 13, 1, 7, 15, 9, 9, 9, 3, 8, 14, 13, 12, 22, 11, 4, 6, 10, 8, 1, 8, 24, 1, 1, 6, 7, 5, 2, 13, 19, 1, 19, 5, 14, 6, 23, 2, 2, 7, 30, 19, 2, 34, 7, 10, 5, 3, 12, 3, 13, 3, 10, 15, 1, 6, 2, 2, 10, 18, 2, 13, 1, 8, 11, 3, 2, 2, 23, 12, 38, 9, 10, 15, 33, 35, 6, 4, 2, 12, 3, 54, 11, 7, 2, 2, 23, 2, 5, 2, 15, 2, 12, 16, 4, 11, 8, 9, 14, 14, 16, 12, 24, 12, 17, 17, 2, 25, 2, 3, 4, 3, 17, 1, 5, 2, 16, 1, 1, 2, 2, 25, 4, 10, 1, 31, 3, 4, 6, 11, 4, 9, 11, 15, 22, 3, 3, 1, 1, 16, 5, 21, 4, 5, 13, 16, 4, 28, 10, 10, 5, 20, 2, 39, 23, 2, 18, 8, 12, 15, 4, 4, 17, 1, 51, 5, 27, 10, 2, 4, 2, 3, 4, 5, 5, 6, 24, 4, 13, 1, 1, 12, 18, 3, 7, 17, 4, 19, 73, 5, 1, 5, 6, 2, 5, 3, 2, 1, 4, 8, 4, 7, 26, 4, 17, 6, 13, 3, 6, 5, 5, 3, 2, 11, 1, 1, 3, 3, 8, 18, 4, 4, 11, 1, 11, 20, 5, 26, 3, 40, 3, 14, 5, 11, 9, 5 };
        static void Main(string[] args)
        {
            metodo2();
        }

        //pular até a próxima vitória, aposta fixa, sem pulo inicial
        public static void metodo1()
        {
            int minMax = 1000;
            int minMaxI = 0;
            for (int i = 1; i < 66; i++)
            {
                int maxLoose = 0;
                int looseCounter = 0;
                for (int j = 0; j < data.Length; j++)
                {
                    if (data[j] > i)
                    {
                        looseCounter += i;
                    }
                    else if (data[j] <= i)
                    {
                        looseCounter += data[j];
                        if (looseCounter > maxLoose)
                        {
                            maxLoose = looseCounter;
                        }
                        looseCounter = 0;
                    }

                }
                Console.WriteLine("Apostas seguidas: " + i + " Contador: " + maxLoose);
                if (minMax > maxLoose)
                {
                    minMaxI = i;
                    minMax = maxLoose;
                }
            }
            Console.WriteLine("Melhor combinação: Apostas seguidas: " + minMaxI + " Contador: " + minMax);
            Console.ReadLine();

            //return new int[] { 1, 2 };
        }

        //pular até a próxima vitória, aposta fixa, com pulo inicial
        public static void metodo2()
        {
            int minMax = 1000;
            int minMaxI = 0;
            int minMaxK = 0;
            for (int k = 0; k < 20; k++)
            {
                for (int i = 1; i < 66; i++)
                {
                    int maxLoose = 0;
                    int looseCounter = 0;
                    for (int j = 0; j < data.Length; j++)
                    {
                        if (data[j] <= k+i && data[j] > k)
                        {
                            looseCounter += data[j];
                            if (looseCounter > maxLoose)
                            {
                                maxLoose = looseCounter;
                            }
                            looseCounter = 0;
                        }
                        else
                        {
                            looseCounter += i;
                        }
                        

                    }
                    Console.WriteLine("Apostas seguidas: " + i + " Jump: " + k + " Contador: " + maxLoose);
                    if (minMax > maxLoose)
                    {
                        minMaxI = i;
                        minMax = maxLoose;
                        minMaxK = k;
                    }
                }
                Console.WriteLine("Melhor combinação: Apostas seguidas: " + minMaxI + " Jump: " + minMaxK + " Contador: " + minMax);
            }
            Console.ReadLine();

            //return new int[] { 1, 2 };
        }

    }
}
